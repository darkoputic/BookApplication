{"ast":null,"code":"import _classCallCheck from \"/Users/darkoputic/Projects/Practice/Angular/StoreApplication/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreRouterConnectingModule } from '@ngrx/router-store';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { AuthModule } from './auth/auth.module';\nimport { AppRoutingModule } from './app-routing.module';\nimport { metaReducers, ROOT_REDUCERS } from './reducers';\nimport { CoreModule } from './core/core.module';\nimport { AppComponent } from './core/containers';\nimport { RouterEffects, UserEffects } from './core/effects';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@ngrx/router-store\";\nimport * as i3 from \"@ngrx/store-devtools\";\nimport * as i4 from \"@ngrx/effects\";\nexport var AppModule = /*#__PURE__*/(function () {\n  var AppModule = function AppModule() {\n    _classCallCheck(this, AppModule);\n  };\n\n  AppModule.ɵfac = function AppModule_Factory(t) {\n    return new (t || AppModule)();\n  };\n\n  AppModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: AppModule,\n    bootstrap: [AppComponent]\n  });\n  AppModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[CommonModule, BrowserModule, BrowserAnimationsModule, HttpClientModule, AuthModule, AppRoutingModule,\n    /**\n     * StoreModule.forRoot is imported once in the root module, accepting a reducer\n     * function or object map of reducer functions. If passed an object of\n     * reducers, combineReducers will be run creating your application\n     * meta-reducer. This returns all providers for an @ngrx/store\n     * based application.\n     */\n    StoreModule.forRoot(ROOT_REDUCERS, {\n      metaReducers: metaReducers,\n      runtimeChecks: {\n        // strictStateImmutability and strictActionImmutability are enabled by default\n        strictStateSerializability: true,\n        strictActionSerializability: true,\n        strictActionWithinNgZone: true,\n        strictActionTypeUniqueness: true\n      }\n    }),\n    /**\n     * @ngrx/router-store keeps router state up-to-date in the store.\n     */\n    StoreRouterConnectingModule.forRoot(),\n    /**\n     * Store devtools instrument the store retaining past versions of state\n     * and recalculating new states. This enables powerful time-travel\n     * debugging.\n     *\n     * To use the debugger, install the Redux Devtools extension for either\n     * Chrome or Firefox\n     *\n     * See: https://github.com/zalmoxisus/redux-devtools-extension\n     */\n    StoreDevtoolsModule.instrument({\n      name: 'NgRx Book Store App' // In a production build you would want to disable the Store Devtools\n      // logOnly: environment.production,\n\n    }),\n    /**\n     * EffectsModule.forRoot() is imported once in the root module and\n     * sets up the effects class to be initialized immediately when the\n     * application starts.\n     *\n     * See: https://ngrx.io/guide/effects#registering-root-effects\n     */\n    EffectsModule.forRoot([UserEffects, RouterEffects]), CoreModule]]\n  });\n  return AppModule;\n})();","map":null,"metadata":{},"sourceType":"module"}