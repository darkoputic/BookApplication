{"ast":null,"code":"import _classCallCheck from \"/Users/darkoputic/Projects/Practice/Angular/StoreApplication/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { defer, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { CollectionApiActions, CollectionPageActions, SelectedBookPageActions } from '../actions';\nimport { BookStorageService } from '../../core/services/book-storage.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../../core/services/book-storage.service\";\nexport var CollectionEffects = /*#__PURE__*/(function () {\n  var CollectionEffects = function CollectionEffects(actions$, storageService) {\n    var _this = this;\n\n    _classCallCheck(this, CollectionEffects);\n\n    this.actions$ = actions$;\n    this.storageService = storageService;\n    this.checkStorageSupport$ = createEffect(function () {\n      return defer(function () {\n        return _this.storageService.supported();\n      });\n    }, {\n      dispatch: false\n    });\n    this.loadCollection$ = createEffect(function () {\n      return _this.actions$.pipe(ofType(CollectionPageActions.enter), switchMap(function () {\n        return _this.storageService.getCollection().pipe(map(function (books) {\n          return CollectionApiActions.loadBooksSuccess({\n            books: books\n          });\n        }), catchError(function (error) {\n          return of(CollectionApiActions.loadBooksFailure({\n            error: error\n          }));\n        }));\n      }));\n    });\n    this.addBookToCollection$ = createEffect(function () {\n      return _this.actions$.pipe(ofType(SelectedBookPageActions.addBook), mergeMap(function (_ref) {\n        var book = _ref.book;\n        return _this.storageService.addToCollection([book]).pipe(map(function () {\n          return CollectionApiActions.addBookSuccess({\n            book: book\n          });\n        }), catchError(function () {\n          return of(CollectionApiActions.addBookFailure({\n            book: book\n          }));\n        }));\n      }));\n    });\n    this.removeBookFromCollection$ = createEffect(function () {\n      return _this.actions$.pipe(ofType(SelectedBookPageActions.removeBook), mergeMap(function (_ref2) {\n        var book = _ref2.book;\n        return _this.storageService.removeFromCollection([book.id]).pipe(map(function () {\n          return CollectionApiActions.removeBookSuccess({\n            book: book\n          });\n        }), catchError(function () {\n          return of(CollectionApiActions.removeBookFailure({\n            book: book\n          }));\n        }));\n      }));\n    });\n  };\n\n  CollectionEffects.ɵfac = function CollectionEffects_Factory(t) {\n    return new (t || CollectionEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.BookStorageService));\n  };\n\n  CollectionEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CollectionEffects,\n    factory: CollectionEffects.ɵfac\n  });\n  return CollectionEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}