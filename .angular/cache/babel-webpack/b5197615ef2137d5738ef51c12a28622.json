{"ast":null,"code":"import _classCallCheck from \"/Users/darkoputic/Projects/Practice/Angular/StoreApplication/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { asyncScheduler, EMPTY as empty, of } from 'rxjs';\nimport { catchError, debounceTime, map, skip, switchMap, takeUntil } from 'rxjs/operators';\nimport { BooksApiActions, FindBookPageActions } from '../actions';\nimport { GoogleBooksService } from '../../core/services/google-books.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../../core/services/google-books.service\";\nexport var BookEffects = /*#__PURE__*/(function () {\n  var BookEffects = function BookEffects(actions$, googleBooks) {\n    var _this = this;\n\n    _classCallCheck(this, BookEffects);\n\n    this.actions$ = actions$;\n    this.googleBooks = googleBooks;\n    this.search$ = createEffect(function () {\n      return function () {\n        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n            _ref$debounce = _ref.debounce,\n            debounce = _ref$debounce === void 0 ? 300 : _ref$debounce,\n            _ref$scheduler = _ref.scheduler,\n            scheduler = _ref$scheduler === void 0 ? asyncScheduler : _ref$scheduler;\n\n        return _this.actions$.pipe(ofType(FindBookPageActions.searchBooks), debounceTime(debounce, scheduler), switchMap(function (_ref2) {\n          var query = _ref2.query;\n\n          if (query === '') {\n            return empty;\n          }\n\n          var nextSearch$ = _this.actions$.pipe(ofType(FindBookPageActions.searchBooks), skip(1));\n\n          return _this.googleBooks.searchBooks(query).pipe(takeUntil(nextSearch$), map(function (books) {\n            return BooksApiActions.searchSuccess({\n              books: books\n            });\n          }), catchError(function (err) {\n            return of(BooksApiActions.searchFailure({\n              errorMsg: err.message\n            }));\n          }));\n        }));\n      };\n    });\n  };\n\n  BookEffects.ɵfac = function BookEffects_Factory(t) {\n    return new (t || BookEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.GoogleBooksService));\n  };\n\n  BookEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BookEffects,\n    factory: BookEffects.ɵfac\n  });\n  return BookEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}