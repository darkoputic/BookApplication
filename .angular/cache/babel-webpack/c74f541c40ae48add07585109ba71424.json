{"ast":null,"code":"import _toConsumableArray from \"/Users/darkoputic/Projects/Practice/Angular/StoreApplication/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { createReducer, on } from '@ngrx/store';\nimport { CollectionApiActions, CollectionPageActions, SelectedBookPageActions } from '../actions';\nexport var collectionFeatureKey = 'collection';\nvar initialState = {\n  loaded: false,\n  loading: false,\n  ids: []\n};\nexport var reducer = createReducer(initialState, on(CollectionPageActions.enter, function (state) {\n  return Object.assign(Object.assign({}, state), {\n    loading: true\n  });\n}), on(CollectionApiActions.loadBooksSuccess, function (state, _ref) {\n  var books = _ref.books;\n  return {\n    loaded: true,\n    loading: false,\n    ids: books.map(function (book) {\n      return book.id;\n    })\n  };\n}), on(SelectedBookPageActions.addBook, CollectionApiActions.removeBookFailure, function (state, _ref2) {\n  var book = _ref2.book;\n\n  if (state.ids.indexOf(book.id) > -1) {\n    return state;\n  }\n\n  return Object.assign(Object.assign({}, state), {\n    ids: [].concat(_toConsumableArray(state.ids), [book.id])\n  });\n}), on(SelectedBookPageActions.removeBook, CollectionApiActions.addBookFailure, function (state, _ref3) {\n  var book = _ref3.book;\n  return Object.assign(Object.assign({}, state), {\n    ids: state.ids.filter(function (id) {\n      return id !== book.id;\n    })\n  });\n}));\nexport var getLoaded = function getLoaded(state) {\n  return state.loaded;\n};\nexport var getLoading = function getLoading(state) {\n  return state.loading;\n};\nexport var getIds = function getIds(state) {\n  return state.ids;\n};","map":null,"metadata":{},"sourceType":"module"}