{"ast":null,"code":"import _defineProperty from \"/Users/darkoputic/Projects/Practice/Angular/StoreApplication/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { createSelector, createFeatureSelector } from '@ngrx/store';\nimport { environment } from '../../environments/environment';\nimport * as fromRouter from '@ngrx/router-store';\n/**\n * Every reducer module's default export is the reducer function itself. In\n * addition, each module should export a type or interface that describes\n * the state of the reducer plus any selector functions. The `* as`\n * notation packages up all of the exports into a single object.\n */\n\nimport * as fromLayout from './../core/reducers/layout.reducer';\nimport { InjectionToken } from '@angular/core';\n/**\n * Our state is composed of a map of action reducer functions.\n * These reducer functions are called with each dispatched action\n * and the current or initial state and return a new immutable state.\n */\n\nexport var ROOT_REDUCERS = new InjectionToken('Root reducers token', {\n  factory: function factory() {\n    var _ref;\n\n    return _ref = {}, _defineProperty(_ref, fromLayout.layoutFeatureKey, fromLayout.reducer), _defineProperty(_ref, \"router\", fromRouter.routerReducer), _ref;\n  }\n}); // console.log all actions\n\nexport function logger(reducer) {\n  return function (state, action) {\n    var result = reducer(state, action);\n    console.groupCollapsed(action.type);\n    console.log('prev state', state);\n    console.log('action', action);\n    console.log('next state', result);\n    console.groupEnd();\n    return result;\n  };\n}\n/**\n * By default, @ngrx/store uses combineReducers with the reducer map to compose\n * the root meta-reducer. To add more meta-reducers, provide an array of meta-reducers\n * that will be composed to form the root meta-reducer.\n */\n\nexport var metaReducers = !environment.production ? [logger] : [];\n/**\n * Layout Selectors\n */\n\nexport var selectLayoutState = createFeatureSelector(fromLayout.layoutFeatureKey);\nexport var selectShowSidenav = createSelector(selectLayoutState, fromLayout.selectShowSidenav);\n/**\n * Router Selectors\n */\n\nvar _fromRouter$getSelect = fromRouter.getSelectors(),\n    selectRouteData = _fromRouter$getSelect.selectRouteData;\n\nexport { selectRouteData };","map":null,"metadata":{},"sourceType":"module"}